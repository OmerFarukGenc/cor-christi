/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package corchristi;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.LogManager;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

public class App {
    public String getGreeting() {
        return "Hello World!";

    }

    public static boolean search(ArrayList<Integer> array, int e) {
        System.out.println("inside search");
        if (array == null)
            return false;

        for (int elt : array) {
            if (elt == e)
                return true;
        }
        return false;

    }

    public static ArrayList<Integer> between(ArrayList<Integer> ARR, Integer A, Integer B, Integer N) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < ARR.size(); i++) {
            int cur = ARR.get(i);
            if (cur > A && cur < B && N > 0) {
                result.add(cur);
                N--;

            }

        }

        return result;
    }

    public static void main(String[] args) {

        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Hello, World <br> <a href='compute'>Compute page</a>");

        post("/compute", (req, res) -> {
            // System.out.println(req.queryParams("input1"));
            // System.out.println(req.queryParams("input2"));
            try {
                String input1 = req.queryParams("input1");
                java.util.Scanner sc1 = new java.util.Scanner(input1);
                sc1.useDelimiter("[;\r\n]+");
                java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
                while (sc1.hasNext()) {
                    int value = Integer.parseInt(sc1.next().replaceAll("\\s", ""));
                    inputList.add(value);
                }
                sc1.close();
                System.out.println(inputList);

                String input2 = req.queryParams("input2").replaceAll("\\s", "");
                int input2AsInt = Integer.parseInt(input2);

                String input3 = req.queryParams("input3").replaceAll("\\s", "");
                int input3AsInt = Integer.parseInt(input3);

                String input4 = req.queryParams("input4").replaceAll("\\s", "");
                int input4AsInt = Integer.parseInt(input4);

                ArrayList<Integer> result = App.between(inputList, input2AsInt, input3AsInt, input4AsInt);

                Map<String, ArrayList<Integer>> map = new HashMap<String, ArrayList<Integer>>();
                map.put("result", result);
                return new ModelAndView(map, "compute.mustache");
            } catch (Exception e) {
                Map<String, String> map = new HashMap<String, String>();
                map.put("result", "ERROR");
                return new ModelAndView(map, "compute.mustache");

            }
        }, new MustacheTemplateEngine());

        get("/compute", (rq, rs) -> {
            Map<String, String> map = new HashMap<String, String>();
            map.put("result", "not computed yet!");
            return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());

    }

    public static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; // return default port if heroku-port isn't set (i.e. on localhost)
    }

}
